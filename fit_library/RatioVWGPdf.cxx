/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "RatioVWGPdf.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"

ClassImp(RatioVWGPdf);

 RatioVWGPdf::RatioVWGPdf(const char *name, const char *title,
                        RooAbsReal& _x,
                        RooAbsReal& _A,
                        RooAbsReal& _B,
                        RooAbsReal& _C,
                        RooAbsReal& _D,
                        RooAbsReal& _E,
                        RooAbsReal& _F,
                        RooAbsReal& _G,
                        RooAbsReal& _H,
                        RooAbsReal& _I) :
   RooAbsPdf(name,title),
   x("x","x",this,_x),
   A("A","A",this,_A),
   B("B","B",this,_B),
   C("C","C",this,_C),
   D("D","D",this,_D),
   E("E","E",this,_E),
   F("F","F",this,_F),
   G("G","G",this,_G),
   H("H","H",this,_H),
   I("I","I",this,_I)
 {
 }


 RatioVWGPdf::RatioVWGPdf(const RatioVWGPdf& other, const char* name) :
   RooAbsPdf(other,name),
   x("x",this,other.x),
   A("A",this,other.A),
   B("B",this,other.B),
   C("C",this,other.C),
   D("D",this,other.D),
   E("E",this,other.E),
   F("F",this,other.F),
   G("G",this,other.G),
   H("H",this,other.H),
   I("I",this,other.I)
 {
 }

 Double_t RatioVWGPdf::evaluate() const
 {
    Double_t mean1 = B;
    Double_t sigma1 = C + D * ((x - mean1) / mean1);
    Double_t arg1 = - ((x - mean1) * (x - mean1)) / (2 * sigma1 * sigma1);

    Double_t mean2 = G;
    Double_t sigma2 = H + I * ((x - mean2) / mean2);
    Double_t arg2 = - (x - mean2) * (x - mean2) / (2. * sigma2 * sigma2);

    return (F * TMath::Exp(arg2)) / (E + A * TMath::Exp(arg1));
 }
