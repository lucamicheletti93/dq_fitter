/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "RatioPol4ExpPdf.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"

ClassImp(RatioPol4ExpPdf);

 RatioPol4ExpPdf::RatioPol4ExpPdf(const char *name, const char *title,
                        RooAbsReal& _x,
                        RooAbsReal& _A,
                        RooAbsReal& _B,
                        RooAbsReal& _C,
                        RooAbsReal& _D,
                        RooAbsReal& _E,
                        RooAbsReal& _P0,
                	      RooAbsReal& _P1,
                        RooAbsReal& _P2,
                        RooAbsReal& _P3,
                        RooAbsReal& _P4,
                        RooAbsReal& _P5) :
   RooAbsPdf(name,title),
   x("x","x",this,_x),
   A("A","A",this,_A),
   B("B","B",this,_B),
   C("C","C",this,_C),
   D("D","D",this,_D),
   E("E","E",this,_E),
   P0("P0","P0",this,_P0),
   P1("P1","P1",this,_P1),
   P2("P2","P2",this,_P2),
   P3("P3","P3",this,_P3),
   P4("P4","P4",this,_P4),
   P5("P5","P5",this,_P5)
 {
 }


 RatioPol4ExpPdf::RatioPol4ExpPdf(const RatioPol4ExpPdf& other, const char* name) :
   RooAbsPdf(other,name),
   x("x",this,other.x),
   A("A",this,other.A),
   B("B",this,other.B),
   C("C",this,other.C),
   D("D",this,other.D),
   E("E",this,other.E),
   P0("P0",this,other.P0),
   P1("P1",this,other.P1),
   P2("P2",this,other.P2),
   P3("P3",this,other.P3),
   P4("P4",this,other.P4),
   P5("P5",this,other.P5)
 {
 }



 Double_t RatioPol4ExpPdf::evaluate() const
 {
    Double_t mean1 = B;
    Double_t sigma1 = C + D * ((x - mean1) / mean1);
    Double_t arg1 = - ((x - mean1) * (x - mean1)) / (2 * sigma1 * sigma1);

    return ((P0 + P1*x + P2*x*x + P3*x*x*x + P4*x*x*x*x) * TMath::Exp(-P5*x)) / (E + A * TMath::Exp(arg1));
 }
